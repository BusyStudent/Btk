#if !defined(_BTK_LOCALS_HPP_)
#define _BTK_LOCALS_HPP_
#include <SDL2/SDL_keycode.h>
#include <SDL2/SDL_scancode.h>
#include <SDL2/SDL_mouse.h>
#include <iosfwd>
#include "defs.hpp"
//A headers to simply use SDL enums
namespace Btk{
    /**
     * @brief SDL_Keycode
     * 
     */
    enum class Keycode:SDL_Keycode{
        Unknown = SDLK_UNKNOWN,
        Return = SDLK_RETURN,
        Escape = SDLK_ESCAPE,
        Backspace = SDLK_BACKSPACE,
        Tab = SDLK_TAB,
        Space = SDLK_SPACE,
        Exclaim = SDLK_EXCLAIM,
        Quotedbl = SDLK_QUOTEDBL,
        Hash = SDLK_HASH,
        Percent = SDLK_PERCENT,
        Dollar = SDLK_DOLLAR,
        Ampersand = SDLK_AMPERSAND,
        Quote = SDLK_QUOTE,
        Leftparen = SDLK_LEFTPAREN,
        Rightparen = SDLK_RIGHTPAREN,
        Asterisk = SDLK_ASTERISK,
        Plus = SDLK_PLUS,
        Comma = SDLK_COMMA,
        Minus = SDLK_MINUS,
        Period = SDLK_PERIOD,
        Slash = SDLK_SLASH,
        _0 = SDLK_0,
        _1 = SDLK_1,
        _2 = SDLK_2,
        _3 = SDLK_3,
        _4 = SDLK_4,
        _5 = SDLK_5,
        _6 = SDLK_6,
        _7 = SDLK_7,
        _8 = SDLK_8,
        _9 = SDLK_9,
        Colon = SDLK_COLON,
        Semicolon = SDLK_SEMICOLON,
        Less = SDLK_LESS,
        Equals = SDLK_EQUALS,
        Greater = SDLK_GREATER,
        Question = SDLK_QUESTION,
        At = SDLK_AT,
        Leftbracket = SDLK_LEFTBRACKET,
        Backslash = SDLK_BACKSLASH,
        Rightbracket = SDLK_RIGHTBRACKET,
        Caret = SDLK_CARET,
        Underscore = SDLK_UNDERSCORE,
        Backquote = SDLK_BACKQUOTE,
        A = SDLK_a,
        B = SDLK_b,
        C = SDLK_c,
        D = SDLK_d,
        E = SDLK_e,
        F = SDLK_f,
        G = SDLK_g,
        H = SDLK_h,
        I = SDLK_i,
        J = SDLK_j,
        K = SDLK_k,
        L = SDLK_l,
        M = SDLK_m,
        N = SDLK_n,
        O = SDLK_o,
        P = SDLK_p,
        Q = SDLK_q,
        R = SDLK_r,
        S = SDLK_s,
        T = SDLK_t,
        U = SDLK_u,
        V = SDLK_v,
        W = SDLK_w,
        X = SDLK_x,
        Y = SDLK_y,
        Z = SDLK_z,
        //Alias
        a = SDLK_a,
        b = SDLK_b,
        c = SDLK_c,
        d = SDLK_d,
        e = SDLK_e,
        f = SDLK_f,
        g = SDLK_g,
        h = SDLK_h,
        i = SDLK_i,
        j = SDLK_j,
        k = SDLK_k,
        l = SDLK_l,
        m = SDLK_m,
        n = SDLK_n,
        o = SDLK_o,
        p = SDLK_p,
        q = SDLK_q,
        r = SDLK_r,
        s = SDLK_s,
        t = SDLK_t,
        u = SDLK_u,
        v = SDLK_v,
        w = SDLK_w,
        x = SDLK_x,
        y = SDLK_y,
        z = SDLK_z,
        
        Capslock = SDLK_CAPSLOCK,
        F1 = SDLK_F1,
        F2 = SDLK_F2,
        F3 = SDLK_F3,
        F4 = SDLK_F4,
        F5 = SDLK_F5,
        F6 = SDLK_F6,
        F7 = SDLK_F7,
        F8 = SDLK_F8,
        F9 = SDLK_F9,
        F10 = SDLK_F10,
        F11 = SDLK_F11,
        F12 = SDLK_F12,
        Printscreen = SDLK_PRINTSCREEN,
        Scrolllock = SDLK_SCROLLLOCK,
        Pause = SDLK_PAUSE,
        Insert = SDLK_INSERT,
        Home = SDLK_HOME,
        Pageup = SDLK_PAGEUP,
        Delete = SDLK_DELETE,
        End = SDLK_END,
        Pagedown = SDLK_PAGEDOWN,
        Right = SDLK_RIGHT,
        Left = SDLK_LEFT,
        Down = SDLK_DOWN,
        Up = SDLK_UP,
        Numlockclear = SDLK_NUMLOCKCLEAR,
        Kp_Divide = SDLK_KP_DIVIDE,
        Kp_Multiply = SDLK_KP_MULTIPLY,
        Kp_Minus = SDLK_KP_MINUS,
        Kp_Plus = SDLK_KP_PLUS,
        Kp_Enter = SDLK_KP_ENTER,
        Kp_1 = SDLK_KP_1,
        Kp_2 = SDLK_KP_2,
        Kp_3 = SDLK_KP_3,
        Kp_4 = SDLK_KP_4,
        Kp_5 = SDLK_KP_5,
        Kp_6 = SDLK_KP_6,
        Kp_7 = SDLK_KP_7,
        Kp_8 = SDLK_KP_8,
        Kp_9 = SDLK_KP_9,
        Kp_0 = SDLK_KP_0,
        Kp_Period = SDLK_KP_PERIOD,
        Application = SDLK_APPLICATION,
        Power = SDLK_POWER,
        Kp_Equals = SDLK_KP_EQUALS,
        F13 = SDLK_F13,
        F14 = SDLK_F14,
        F15 = SDLK_F15,
        F16 = SDLK_F16,
        F17 = SDLK_F17,
        F18 = SDLK_F18,
        F19 = SDLK_F19,
        F20 = SDLK_F20,
        F21 = SDLK_F21,
        F22 = SDLK_F22,
        F23 = SDLK_F23,
        F24 = SDLK_F24,
        Execute = SDLK_EXECUTE,
        Help = SDLK_HELP,
        Menu = SDLK_MENU,
        Select = SDLK_SELECT,
        Stop = SDLK_STOP,
        Again = SDLK_AGAIN,
        Undo = SDLK_UNDO,
        Cut = SDLK_CUT,
        Copy = SDLK_COPY,
        Paste = SDLK_PASTE,
        Find = SDLK_FIND,
        Mute = SDLK_MUTE,
        Volumeup = SDLK_VOLUMEUP,
        Volumedown = SDLK_VOLUMEDOWN,
        Kp_Comma = SDLK_KP_COMMA,
        Kp_Equalsas400 = SDLK_KP_EQUALSAS400,
        Alterase = SDLK_ALTERASE,
        Sysreq = SDLK_SYSREQ,
        Cancel = SDLK_CANCEL,
        Clear = SDLK_CLEAR,
        Prior = SDLK_PRIOR,
        Return2 = SDLK_RETURN2,
        Separator = SDLK_SEPARATOR,
        Out = SDLK_OUT,
        Oper = SDLK_OPER,
        Clearagain = SDLK_CLEARAGAIN,
        Crsel = SDLK_CRSEL,
        Exsel = SDLK_EXSEL,
        Kp_00 = SDLK_KP_00,
        Kp_000 = SDLK_KP_000,
        Thousandsseparator = SDLK_THOUSANDSSEPARATOR,
        Decimalseparator = SDLK_DECIMALSEPARATOR,
        Currencyunit = SDLK_CURRENCYUNIT,
        Currencysubunit = SDLK_CURRENCYSUBUNIT,
        Kp_Leftparen = SDLK_KP_LEFTPAREN,
        Kp_Rightparen = SDLK_KP_RIGHTPAREN,
        Kp_Leftbrace = SDLK_KP_LEFTBRACE,
        Kp_Rightbrace = SDLK_KP_RIGHTBRACE,
        Kp_Tab = SDLK_KP_TAB,
        Kp_Backspace = SDLK_KP_BACKSPACE,
        Kp_A = SDLK_KP_A,
        Kp_B = SDLK_KP_B,
        Kp_C = SDLK_KP_C,
        Kp_D = SDLK_KP_D,
        Kp_E = SDLK_KP_E,
        Kp_F = SDLK_KP_F,
        Kp_Xor = SDLK_KP_XOR,
        Kp_Power = SDLK_KP_POWER,
        Kp_Percent = SDLK_KP_PERCENT,
        Kp_Less = SDLK_KP_LESS,
        Kp_Greater = SDLK_KP_GREATER,
        Kp_Ampersand = SDLK_KP_AMPERSAND,
        Kp_Dblampersand = SDLK_KP_DBLAMPERSAND,
        Kp_Verticalbar = SDLK_KP_VERTICALBAR,
        Kp_Dblverticalbar = SDLK_KP_DBLVERTICALBAR,
        Kp_Colon = SDLK_KP_COLON,
        Kp_Hash = SDLK_KP_HASH,
        Kp_Space = SDLK_KP_SPACE,
        Kp_At = SDLK_KP_AT,
        Kp_Exclam = SDLK_KP_EXCLAM,
        Kp_Memstore = SDLK_KP_MEMSTORE,
        Kp_Memrecall = SDLK_KP_MEMRECALL,
        Kp_Memclear = SDLK_KP_MEMCLEAR,
        Kp_Memadd = SDLK_KP_MEMADD,
        Kp_Memsubtract = SDLK_KP_MEMSUBTRACT,
        Kp_Memmultiply = SDLK_KP_MEMMULTIPLY,
        Kp_Memdivide = SDLK_KP_MEMDIVIDE,
        Kp_Plusminus = SDLK_KP_PLUSMINUS,
        Kp_Clear = SDLK_KP_CLEAR,
        Kp_Clearentry = SDLK_KP_CLEARENTRY,
        Kp_Binary = SDLK_KP_BINARY,
        Kp_Octal = SDLK_KP_OCTAL,
        Kp_Decimal = SDLK_KP_DECIMAL,
        Kp_Hexadecimal = SDLK_KP_HEXADECIMAL,
        Lctrl = SDLK_LCTRL,
        Lshift = SDLK_LSHIFT,
        Lalt = SDLK_LALT,
        Lgui = SDLK_LGUI,
        Rctrl = SDLK_RCTRL,
        Rshift = SDLK_RSHIFT,
        Ralt = SDLK_RALT,
        Rgui = SDLK_RGUI,
        Mode = SDLK_MODE,
        Audionext = SDLK_AUDIONEXT,
        Audioprev = SDLK_AUDIOPREV,
        Audiostop = SDLK_AUDIOSTOP,
        Audioplay = SDLK_AUDIOPLAY,
        Audiomute = SDLK_AUDIOMUTE,
        Mediaselect = SDLK_MEDIASELECT,
        Www = SDLK_WWW,
        Mail = SDLK_MAIL,
        Calculator = SDLK_CALCULATOR,
        Computer = SDLK_COMPUTER,
        Ac_Search = SDLK_AC_SEARCH,
        Ac_Home = SDLK_AC_HOME,
        Ac_Back = SDLK_AC_BACK,
        Ac_Forward = SDLK_AC_FORWARD,
        Ac_Stop = SDLK_AC_STOP,
        Ac_Refresh = SDLK_AC_REFRESH,
        Ac_Bookmarks = SDLK_AC_BOOKMARKS,
        Brightnessdown = SDLK_BRIGHTNESSDOWN,
        Brightnessup = SDLK_BRIGHTNESSUP,
        Displayswitch = SDLK_DISPLAYSWITCH,
        Kbdillumtoggle = SDLK_KBDILLUMTOGGLE,
        Kbdillumdown = SDLK_KBDILLUMDOWN,
        Kbdillumup = SDLK_KBDILLUMUP,
        Eject = SDLK_EJECT,
        Sleep = SDLK_SLEEP,
        App1 = SDLK_APP1,
        App2 = SDLK_APP2,
        Audiorewind = SDLK_AUDIOREWIND,
        Audiofastforward = SDLK_AUDIOFASTFORWARD
    };
    /**
     * @brief SDL_Scancode
     * 
     */
    enum class Scancode{
        Unknown = SDL_SCANCODE_UNKNOWN,
        A = SDL_SCANCODE_A,
        B = SDL_SCANCODE_B,
        C = SDL_SCANCODE_C,
        D = SDL_SCANCODE_D,
        E = SDL_SCANCODE_E,
        F = SDL_SCANCODE_F,
        G = SDL_SCANCODE_G,
        H = SDL_SCANCODE_H,
        I = SDL_SCANCODE_I,
        J = SDL_SCANCODE_J,
        K = SDL_SCANCODE_K,
        L = SDL_SCANCODE_L,
        M = SDL_SCANCODE_M,
        N = SDL_SCANCODE_N,
        O = SDL_SCANCODE_O,
        P = SDL_SCANCODE_P,
        Q = SDL_SCANCODE_Q,
        R = SDL_SCANCODE_R,
        S = SDL_SCANCODE_S,
        T = SDL_SCANCODE_T,
        U = SDL_SCANCODE_U,
        V = SDL_SCANCODE_V,
        W = SDL_SCANCODE_W,
        X = SDL_SCANCODE_X,
        Y = SDL_SCANCODE_Y,
        Z = SDL_SCANCODE_Z,
        _1 = SDL_SCANCODE_1,
        _2 = SDL_SCANCODE_2,
        _3 = SDL_SCANCODE_3,
        _4 = SDL_SCANCODE_4,
        _5 = SDL_SCANCODE_5,
        _6 = SDL_SCANCODE_6,
        _7 = SDL_SCANCODE_7,
        _8 = SDL_SCANCODE_8,
        _9 = SDL_SCANCODE_9,
        _0 = SDL_SCANCODE_0,
        Return = SDL_SCANCODE_RETURN,
        Escape = SDL_SCANCODE_ESCAPE,
        Backspace = SDL_SCANCODE_BACKSPACE,
        Tab = SDL_SCANCODE_TAB,
        Space = SDL_SCANCODE_SPACE,
        Minus = SDL_SCANCODE_MINUS,
        Equals = SDL_SCANCODE_EQUALS,
        Leftbracket = SDL_SCANCODE_LEFTBRACKET,
        Rightbracket = SDL_SCANCODE_RIGHTBRACKET,
        Backslash = SDL_SCANCODE_BACKSLASH,
        Nonushash = SDL_SCANCODE_NONUSHASH,
        Semicolon = SDL_SCANCODE_SEMICOLON,
        Apostrophe = SDL_SCANCODE_APOSTROPHE,
        Grave = SDL_SCANCODE_GRAVE,
        Comma = SDL_SCANCODE_COMMA,
        Period = SDL_SCANCODE_PERIOD,
        Slash = SDL_SCANCODE_SLASH,
        Capslock = SDL_SCANCODE_CAPSLOCK,
        F1 = SDL_SCANCODE_F1,
        F2 = SDL_SCANCODE_F2,
        F3 = SDL_SCANCODE_F3,
        F4 = SDL_SCANCODE_F4,
        F5 = SDL_SCANCODE_F5,
        F6 = SDL_SCANCODE_F6,
        F7 = SDL_SCANCODE_F7,
        F8 = SDL_SCANCODE_F8,
        F9 = SDL_SCANCODE_F9,
        F10 = SDL_SCANCODE_F10,
        F11 = SDL_SCANCODE_F11,
        F12 = SDL_SCANCODE_F12,
        Printscreen = SDL_SCANCODE_PRINTSCREEN,
        Scrolllock = SDL_SCANCODE_SCROLLLOCK,
        Pause = SDL_SCANCODE_PAUSE,
        Insert = SDL_SCANCODE_INSERT,
        Home = SDL_SCANCODE_HOME,
        Pageup = SDL_SCANCODE_PAGEUP,
        Delete = SDL_SCANCODE_DELETE,
        End = SDL_SCANCODE_END,
        Pagedown = SDL_SCANCODE_PAGEDOWN,
        Right = SDL_SCANCODE_RIGHT,
        Left = SDL_SCANCODE_LEFT,
        Down = SDL_SCANCODE_DOWN,
        Up = SDL_SCANCODE_UP,
        Numlockclear = SDL_SCANCODE_NUMLOCKCLEAR,
        Kp_Divide = SDL_SCANCODE_KP_DIVIDE,
        Kp_Multiply = SDL_SCANCODE_KP_MULTIPLY,
        Kp_Minus = SDL_SCANCODE_KP_MINUS,
        Kp_Plus = SDL_SCANCODE_KP_PLUS,
        Kp_Enter = SDL_SCANCODE_KP_ENTER,
        Kp_1 = SDL_SCANCODE_KP_1,
        Kp_2 = SDL_SCANCODE_KP_2,
        Kp_3 = SDL_SCANCODE_KP_3,
        Kp_4 = SDL_SCANCODE_KP_4,
        Kp_5 = SDL_SCANCODE_KP_5,
        Kp_6 = SDL_SCANCODE_KP_6,
        Kp_7 = SDL_SCANCODE_KP_7,
        Kp_8 = SDL_SCANCODE_KP_8,
        Kp_9 = SDL_SCANCODE_KP_9,
        Kp_0 = SDL_SCANCODE_KP_0,
        Kp_Period = SDL_SCANCODE_KP_PERIOD,
        Nonusbackslash = SDL_SCANCODE_NONUSBACKSLASH,
        Application = SDL_SCANCODE_APPLICATION,
        Power = SDL_SCANCODE_POWER,
        Kp_Equals = SDL_SCANCODE_KP_EQUALS,
        F13 = SDL_SCANCODE_F13,
        F14 = SDL_SCANCODE_F14,
        F15 = SDL_SCANCODE_F15,
        F16 = SDL_SCANCODE_F16,
        F17 = SDL_SCANCODE_F17,
        F18 = SDL_SCANCODE_F18,
        F19 = SDL_SCANCODE_F19,
        F20 = SDL_SCANCODE_F20,
        F21 = SDL_SCANCODE_F21,
        F22 = SDL_SCANCODE_F22,
        F23 = SDL_SCANCODE_F23,
        F24 = SDL_SCANCODE_F24,
        Execute = SDL_SCANCODE_EXECUTE,
        Help = SDL_SCANCODE_HELP,
        Menu = SDL_SCANCODE_MENU,
        Select = SDL_SCANCODE_SELECT,
        Stop = SDL_SCANCODE_STOP,
        Again = SDL_SCANCODE_AGAIN,
        Undo = SDL_SCANCODE_UNDO,
        Cut = SDL_SCANCODE_CUT,
        Copy = SDL_SCANCODE_COPY,
        Paste = SDL_SCANCODE_PASTE,
        Find = SDL_SCANCODE_FIND,
        Mute = SDL_SCANCODE_MUTE,
        Volumeup = SDL_SCANCODE_VOLUMEUP,
        Volumedown = SDL_SCANCODE_VOLUMEDOWN,
        Kp_Comma = SDL_SCANCODE_KP_COMMA,
        Kp_Equalsas400 = SDL_SCANCODE_KP_EQUALSAS400,
        International1 = SDL_SCANCODE_INTERNATIONAL1,
        International2 = SDL_SCANCODE_INTERNATIONAL2,
        International3 = SDL_SCANCODE_INTERNATIONAL3,
        International4 = SDL_SCANCODE_INTERNATIONAL4,
        International5 = SDL_SCANCODE_INTERNATIONAL5,
        International6 = SDL_SCANCODE_INTERNATIONAL6,
        International7 = SDL_SCANCODE_INTERNATIONAL7,
        International8 = SDL_SCANCODE_INTERNATIONAL8,
        International9 = SDL_SCANCODE_INTERNATIONAL9,
        Lang1 = SDL_SCANCODE_LANG1,
        Lang2 = SDL_SCANCODE_LANG2,
        Lang3 = SDL_SCANCODE_LANG3,
        Lang4 = SDL_SCANCODE_LANG4,
        Lang5 = SDL_SCANCODE_LANG5,
        Lang6 = SDL_SCANCODE_LANG6,
        Lang7 = SDL_SCANCODE_LANG7,
        Lang8 = SDL_SCANCODE_LANG8,
        Lang9 = SDL_SCANCODE_LANG9,
        Alterase = SDL_SCANCODE_ALTERASE,
        Sysreq = SDL_SCANCODE_SYSREQ,
        Cancel = SDL_SCANCODE_CANCEL,
        Clear = SDL_SCANCODE_CLEAR,
        Prior = SDL_SCANCODE_PRIOR,
        Return2 = SDL_SCANCODE_RETURN2,
        Separator = SDL_SCANCODE_SEPARATOR,
        Out = SDL_SCANCODE_OUT,
        Oper = SDL_SCANCODE_OPER,
        Clearagain = SDL_SCANCODE_CLEARAGAIN,
        Crsel = SDL_SCANCODE_CRSEL,
        Exsel = SDL_SCANCODE_EXSEL,
        Kp_00 = SDL_SCANCODE_KP_00,
        Kp_000 = SDL_SCANCODE_KP_000,
        Thousandsseparator = SDL_SCANCODE_THOUSANDSSEPARATOR,
        Decimalseparator = SDL_SCANCODE_DECIMALSEPARATOR,
        Currencyunit = SDL_SCANCODE_CURRENCYUNIT,
        Currencysubunit = SDL_SCANCODE_CURRENCYSUBUNIT,
        Kp_Leftparen = SDL_SCANCODE_KP_LEFTPAREN,
        Kp_Rightparen = SDL_SCANCODE_KP_RIGHTPAREN,
        Kp_Leftbrace = SDL_SCANCODE_KP_LEFTBRACE,
        Kp_Rightbrace = SDL_SCANCODE_KP_RIGHTBRACE,
        Kp_Tab = SDL_SCANCODE_KP_TAB,
        Kp_Backspace = SDL_SCANCODE_KP_BACKSPACE,
        Kp_A = SDL_SCANCODE_KP_A,
        Kp_B = SDL_SCANCODE_KP_B,
        Kp_C = SDL_SCANCODE_KP_C,
        Kp_D = SDL_SCANCODE_KP_D,
        Kp_E = SDL_SCANCODE_KP_E,
        Kp_F = SDL_SCANCODE_KP_F,
        Kp_Xor = SDL_SCANCODE_KP_XOR,
        Kp_Power = SDL_SCANCODE_KP_POWER,
        Kp_Percent = SDL_SCANCODE_KP_PERCENT,
        Kp_Less = SDL_SCANCODE_KP_LESS,
        Kp_Greater = SDL_SCANCODE_KP_GREATER,
        Kp_Ampersand = SDL_SCANCODE_KP_AMPERSAND,
        Kp_Dblampersand = SDL_SCANCODE_KP_DBLAMPERSAND,
        Kp_Verticalbar = SDL_SCANCODE_KP_VERTICALBAR,
        Kp_Dblverticalbar = SDL_SCANCODE_KP_DBLVERTICALBAR,
        Kp_Colon = SDL_SCANCODE_KP_COLON,
        Kp_Hash = SDL_SCANCODE_KP_HASH,
        Kp_Space = SDL_SCANCODE_KP_SPACE,
        Kp_At = SDL_SCANCODE_KP_AT,
        Kp_Exclam = SDL_SCANCODE_KP_EXCLAM,
        Kp_Memstore = SDL_SCANCODE_KP_MEMSTORE,
        Kp_Memrecall = SDL_SCANCODE_KP_MEMRECALL,
        Kp_Memclear = SDL_SCANCODE_KP_MEMCLEAR,
        Kp_Memadd = SDL_SCANCODE_KP_MEMADD,
        Kp_Memsubtract = SDL_SCANCODE_KP_MEMSUBTRACT,
        Kp_Memmultiply = SDL_SCANCODE_KP_MEMMULTIPLY,
        Kp_Memdivide = SDL_SCANCODE_KP_MEMDIVIDE,
        Kp_Plusminus = SDL_SCANCODE_KP_PLUSMINUS,
        Kp_Clear = SDL_SCANCODE_KP_CLEAR,
        Kp_Clearentry = SDL_SCANCODE_KP_CLEARENTRY,
        Kp_Binary = SDL_SCANCODE_KP_BINARY,
        Kp_Octal = SDL_SCANCODE_KP_OCTAL,
        Kp_Decimal = SDL_SCANCODE_KP_DECIMAL,
        Kp_Hexadecimal = SDL_SCANCODE_KP_HEXADECIMAL,
        Lctrl = SDL_SCANCODE_LCTRL,
        Lshift = SDL_SCANCODE_LSHIFT,
        Lalt = SDL_SCANCODE_LALT,
        Lgui = SDL_SCANCODE_LGUI,
        Rctrl = SDL_SCANCODE_RCTRL,
        Rshift = SDL_SCANCODE_RSHIFT,
        Ralt = SDL_SCANCODE_RALT,
        Rgui = SDL_SCANCODE_RGUI,
        Mode = SDL_SCANCODE_MODE,
        Audionext = SDL_SCANCODE_AUDIONEXT,
        Audioprev = SDL_SCANCODE_AUDIOPREV,
        Audiostop = SDL_SCANCODE_AUDIOSTOP,
        Audioplay = SDL_SCANCODE_AUDIOPLAY,
        Audiomute = SDL_SCANCODE_AUDIOMUTE,
        Mediaselect = SDL_SCANCODE_MEDIASELECT,
        Www = SDL_SCANCODE_WWW,
        Mail = SDL_SCANCODE_MAIL,
        Calculator = SDL_SCANCODE_CALCULATOR,
        Computer = SDL_SCANCODE_COMPUTER,
        Ac_Search = SDL_SCANCODE_AC_SEARCH,
        Ac_Home = SDL_SCANCODE_AC_HOME,
        Ac_Back = SDL_SCANCODE_AC_BACK,
        Ac_Forward = SDL_SCANCODE_AC_FORWARD,
        Ac_Stop = SDL_SCANCODE_AC_STOP,
        Ac_Refresh = SDL_SCANCODE_AC_REFRESH,
        Ac_Bookmarks = SDL_SCANCODE_AC_BOOKMARKS,
        Brightnessdown = SDL_SCANCODE_BRIGHTNESSDOWN,
        Brightnessup = SDL_SCANCODE_BRIGHTNESSUP,
        Displayswitch = SDL_SCANCODE_DISPLAYSWITCH,
        Kbdillumtoggle = SDL_SCANCODE_KBDILLUMTOGGLE,
        Kbdillumdown = SDL_SCANCODE_KBDILLUMDOWN,
        Kbdillumup = SDL_SCANCODE_KBDILLUMUP,
        Eject = SDL_SCANCODE_EJECT,
        Sleep = SDL_SCANCODE_SLEEP,
        App1 = SDL_SCANCODE_APP1,
        App2 = SDL_SCANCODE_APP2,
        Audiorewind = SDL_SCANCODE_AUDIOREWIND,
        Audiofastforward = SDL_SCANCODE_AUDIOFASTFORWARD
    };
    //Keymode enum
    enum class Keymode:Uint16{
        None = KMOD_NONE,
        Lshift = KMOD_LSHIFT,
        Rshift = KMOD_RSHIFT,
        Lctrl = KMOD_LCTRL,
        Rctrl = KMOD_RCTRL,
        Lalt = KMOD_LALT,
        Ralt = KMOD_RALT,
        Lgui = KMOD_LGUI,
        Rgui = KMOD_RGUI,
        Num = KMOD_NUM,
        Caps = KMOD_CAPS,
        Mode = KMOD_MODE,
        Reserved = KMOD_RESERVED,
        Ctrl = KMOD_CTRL,
        Shift = KMOD_SHIFT,
        Alt = KMOD_ALT,
        Gui = KMOD_GUI,
    };
    inline Keymode operator |(Keymode a,Keymode b){
        return static_cast<Keymode>
            (static_cast<Uint16>(a) | static_cast<Uint16>(b)
        );
    };
    inline Keymode operator &(Keymode a,Keymode b){
        return static_cast<Keymode>
            (static_cast<Uint16>(a) & static_cast<Uint16>(b)
        );
    };
    inline bool operator ==(Keymode a,Uint16 b){
        return Uint16(a) == b;
    }
    inline bool operator !=(Keymode a,Uint16 b){
        return Uint16(a) != b;
    }
    inline bool operator ==(Keycode a,SDL_Keycode b){
        return SDL_Keycode(a) == b;
    }
    inline bool operator !=(Keycode a,SDL_Keycode b){
        return SDL_Keycode(a) != b;
    }
    inline bool operator ==(Scancode a,SDL_Scancode b){
        return SDL_Scancode(a) == b;
    }
    inline bool operator!=(Scancode a,SDL_Scancode b){
        return SDL_Scancode(a) != b;
    }
    BTKAPI std::ostream &operator <<(std::ostream &o,Scancode c);
    BTKAPI std::ostream &operator <<(std::ostream &o,Keycode c);
};

#endif // _BTK_LOCALS_HPP_
