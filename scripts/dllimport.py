#!/usr/bin/env python3
import json
import sys
import os

plat_map = {
    "linux" : "__linux",
    "win32" : "__WIN32",
    "macos" : "__APPLE__"
}

def compile(data):
    ofs = ""
    plat = sys.platform
    # data = json.loads(ifs)

    symbols = data["symbols"]
    name = data["name"].upper()
    perfix = data["perfix"] + "_" + name
    #Perfix like BTK_PNG

    struct_type = "_%sLibrary" % name
    struct_ins = "_lib_%s" % name
    #Library instance

    ofs += "/* Generated by dllimport.py */\n"
    ofs += "#include <Btk/impl/loadso.hpp>\n"
    ofs += "#include <Btk/impl/scope.hpp>\n"
    
    #Generate library macro
    ofs += '\n'
    ofs += "#ifdef %s_DYMAIC\n" % perfix
    ofs += "    #define %s_LOAD()   %s.load()\n" % (perfix,struct_ins)
    ofs += "    #define %s_UNLOAD() %s.unload()\n" % (perfix,struct_ins)
    ofs += "#else\n"
    ofs += "    #define %s_LOAD()   \n" % perfix
    ofs += "    #define %s_UNLOAD()   \n" % perfix
    ofs += "#endif\n"

    #Generate platform depended dymaic library path
    ofs += '\n'
    ofs += "//Platform depended dymaic library path\n"
    if data.get("librarys") != None:
        for i in data["librarys"]:
            plat_name = plat_map[i]
            libname = data["librarys"][i]
            ofs += "#ifdef %s\n" % (plat_name)
            ofs += '    #define %s_LIBNAME "%s"\n' % (perfix,libname)
            ofs += "#endif\n"
    else:
        #No dymaic library path
        ofs += '#define %s_LIBNAME ""\n'

    ofs += '\n'

    #Generate library loader
    ofs += "#ifdef %s_DYMAIC\n" % perfix

    #Struct elem
    ofs += "//Library Elem\n"
    ofs += "struct %s {\n" % struct_type
    ofs += "    BTK_DYMAIC_LIBRARY(%s_LIBNAME);\n" % (perfix)
    for sym in symbols:
        ofs += "    BTK_DYMAIC_FUNCTION(%s);\n" %(sym)
        pass
    ofs += "};\n"

    #Make it
    ofs += "BTK_MAKE_DYLIB(%s,%s);\n" %(struct_type,struct_ins)
    #Function macro
    ofs += '//Function macro\n'
    for sym in symbols:
        ofs += "#define %s %s->%s\n" %(sym,struct_ins,sym)
    #Autoload
    ofs += "//Autoload magic\n"
    if data.get("autoload") != None:
        if data["autoload"]:
            ofs += "Btk_CallOnLoad [](){%s_LOAD();};" % perfix
    ofs += "#endif\n"


    return ofs

def process_file(fname):
    data = json.load(open(fname,'r'))
    out = compile(data)
    f = open("../src/images/loader/%s.hpp" % data['name'],'w')
    f.write(out)
    f.close()

if __name__ == "__main__":
    for i in os.listdir():
        if i.endswith('.json'):
            process_file(i)