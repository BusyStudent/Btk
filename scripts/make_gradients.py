#!/usr/bin/env python3
import json

data = ""
out  = ""
# For themes/gradients_preset.cpp
preset = ""
# For graphics/gradients_preset.hpp

with open("gradients-parsed.json", "r") as f:
    data = json.load(f)


name_list = []
for gradient in data:
    name = gradient["name"].replace(" ", "")
    name_list.append(name)
# Sort the list by name
name_list = sorted(name_list)

preset += "// This file is autogenerated by scripts/make_gradients.py\n"
# Parse the data
preset += "enum Preset : int {\n"
for name in name_list:
    preset += "    %s,\n" % name
preset += "};\n"

out += "// This file is autogenerated by scripts/make_gradients.py\n"
out += "static void mk_gradient(Btk::Gradient &g,Btk::Gradient::Preset type) {\n"
out += "    switch (type) {\n"


for gradient in data:
    name = gradient["name"].replace(" ", "")

    out += "        case Btk::Gradient::%s:\n" % name

    for stop in gradient["gradient"]:
        #Normalize the color
        pos = (stop["pos"] / 100)
        color = stop["color"]

        #Split the color into RGB
        r = color[1:3]
        g = color[3:5]
        b = color[5:7]

        #Add code
        out += "            g.add_color(%sf,Btk::Color(0x%s,0x%s,0x%s));\n" % (pos, r, g, b)
    #End this
    out += "            break;\n"

out += "    }\n"
out += "}\n"

#Save 
with open("../src/graphics/gradients_mk.inl", "w") as f:
    f.write(out);
with open("../include/Btk/graphics/gradients_enum.inl", "w") as f:
    f.write(preset)